[
    {
        "id": 1,
        "question": "What is useState and how does it work in React?",
        "answer": "useState is a React Hook that allows you to add state to functional components. It returns a state variable and a function to update it. Example: const [count, setCount] = useState(0);"
    },
    {
        "id": 2,
        "question": "What is the purpose of useEffect in React?",
        "answer": "useEffect is a React Hook used to handle side effects such as data fetching, DOM updates, or timers. It runs after the component renders and can optionally clean up effects using a return function."
    },
    {
        "id": 3,
        "question": "What is a custom hook in React and when should you use one?",
        "answer": "A custom hook is a reusable function that starts with 'use' and can use other hooks inside it. You use a custom hook to extract and reuse logic between components for better code organization and reusability."
    },
    {
        "id": 4,
        "question": "Difference between controlled and uncontrolled components. Which one is better?",
        "answer": "Controlled components have their form data controlled by React state using useState or similar. Uncontrolled components store data in the DOM and access it via refs. Controlled components are preferred as they offer better control, validation, and consistency."
    },
    {
        "id": 5,
        "question": "Tell us something about useFormStatus() in React.",
        "answer": "useFormStatus() is a React hook from the React DOM form features (like in Remix or React Server Components). It provides information about the current status of a form submission, such as pending or success. It's useful for disabling buttons or showing loading indicators during submission."
    }
]